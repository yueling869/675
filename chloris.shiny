library(sf)
library(rgdal)
library(sp)
library(raster)
library(DBI)
library(RPostgreSQL)
library(methods)
library(datasets)
library(RPostgres)
library(dplyr)
library(ggplot2)
library(NLP)
library(datapack)
library(terra)


conn <- dbConnect(Postgres(), host = "bu-rstudio-connect.bu.edu",
                  user = "chloris", password = "msspfall22",
                  dbname = "chloris", sslmode="require") # SSL needed!
query <- "SELECT path, row, date, band, filename, count(*) FROM landsat GROUP BY path, row, date, band, filename LIMIT 1000"
qdf <- dbGetQuery(conn, query)

conninfo <- "PG:host=bu-rstudio-connect.bu.edu user=chloris dbname=chloris password=msspfall22 table=landsat mode=2 where='date=\\'2021-10-17\\' AND band=\\'4\\''"

GDALinfo(conninfo)
getrcl = function(condition_array){
  cloud_value = c(2800, 2804, 2808, 2812, 6896, 6900, 6904, 6908)
  cloudshadow_value = c(2976, 2980, 2984, 2988, 3008, 3012, 3016, 3020, 7072, 7076, 7080, 7084, 7104, 7108, 7112, 7116)
  snowice_value = c(3744, 3748, 3752, 3756, 3776, 3780, 3784, 3788, 7840, 7844, 7848, 7852, 7872, 7876, 7880, 7884)
  cirrus_value = c(6816, 6820, 6824, 6828, 6848, 6852, 6856, 6860, 6896, 6900, 6904, 6908, 7072, 7076, 7080, 7084, 7104, 7108, 7112, 7116, 7840, 7844, 7848, 7852, 7872, 7876, 7880, 7884)
  rclValue = c()
  if (condition_array[1]){
    rclValue = c(rclValue, cloud_value)
  }
  if (condition_array[2]){
    rclValue = c(rclValue, cloudshadow_value)
  }
  if (condition_array[3]){
    rclValue = c(rclValue, snowice_value)
  }
  if (condition_array[4]){
    rclValue = c(rclValue, cirrus_value)
  }
  if (length(rclValue) == 0){
    rclValue = 3
  } else {
    rclValue = unique(rclValue)
  }
  rcl = cbind(rclValue, rep(3, length(rclValue)))
  return(rcl)
}
getMask = function(getDate, getBand, condition_array){
  tmp_con = paste("PG:host=bu-rstudio-connect.bu.edu user=chloris dbname=chloris password=msspfall22 table=landsat mode=2 where='date=\\'", getDate, "\\' AND band=\\'", getBand, "\\''", sep = "")
  tmp_con_QA = paste("PG:host=bu-rstudio-connect.bu.edu user=chloris dbname=chloris password=msspfall22 table=landsat mode=2 where='date=\\'", getDate, "\\' AND band=\\'QA\\''", sep = "")
  r <- raster(readGDAL(tmp_con))
  r_QA <- raster(readGDAL(tmp_con_QA))
  rcl = getrcl(condition_array)
  r_mask = reclassify(r_QA, rcl)
  #maskValue = c(2720, 2724)
  r_mask =  mask(r, r_mask, maskvalue = 3, updatvalue = NA, inverse = FALSE)
  plot(r_mask)
}

### That's what Team 1 may need
### enter an array of QA value and an string of condition set(e.g, c(0,0,1,1)), return an array of 0 and 1
getQAarray = function(qa_array, condition_array){
  classifly_array = rep(1, length(qa_array))
  for (i in 1:length(qa_array)) {
    qa_bit = number2binary(qa_array[i], 16)
    zerone = rep(0, 4)
    if (qa_bit[12]==1){
      zerone[1] = 1
    }
    if (qa_bit[8] * qa_bit[9]==1){
      zerone[2] = 1
    }
    if (qa_bit[6] * qa_bit[7]==1){
      zerone[3] = 1
    }
    if (qa_bit[4] * qa_bit[5]==1){
      zerone[4] = 1
    }
    if(sum(condition_array & zerone)>0){
      classifly_array[i] = 0
    }
  }
  return(classifly_array)
}
number2binary = function(number, noBits) {
  binary_vector = rev(as.numeric(intToBits(number)))
  if(missing(noBits)) {
    return(binary_vector)
  } else {
    binary_vector[-(1:(length(binary_vector) - noBits))]
  }
}



library(rgdal)
library(raster)
library(RPostgres)
library(RPostgreSQL)
library(dplyr)
library(ggplot2)
library(NLP)
library(datapack)




getrcl = function(condition_array){
  cloud_value = c(2800, 2804, 2808, 2812, 6896, 6900, 6904, 6908)
  cloudshadow_value = c(2976, 2980, 2984, 2988, 3008, 3012, 3016, 3020, 7072, 7076, 7080, 7084, 7104, 7108, 7112, 7116)
  snowice_value = c(3744, 3748, 3752, 3756, 3776, 3780, 3784, 3788, 7840, 7844, 7848, 7852, 7872, 7876, 7880, 7884)
  cirrus_value = c(6816, 6820, 6824, 6828, 6848, 6852, 6856, 6860, 6896, 6900, 6904, 6908, 7072, 7076, 7080, 7084, 7104, 7108, 7112, 7116, 7840, 7844, 7848, 7852, 7872, 7876, 7880, 7884)
  rclValue = c()
  if (condition_array[1]){
    rclValue = c(rclValue, cloud_value)
  }
  if (condition_array[2]){
    rclValue = c(rclValue, cloudshadow_value)
  }
  if (condition_array[3]){
    rclValue = c(rclValue, snowice_value)
  }
  if (condition_array[4]){
    rclValue = c(rclValue, cirrus_value)
  }
  if (length(rclValue) == 0){
    rclValue = 3
  } else {
    rclValue = unique(rclValue)
  }
  rcl = cbind(rclValue, rep(3, length(rclValue)))
  return(rcl)
}
getQAarray = function(qa_array, condition_array){
  classifly_array = rep(1, length(qa_array))
  for (i in 1:length(qa_array)) {
    qa_bit = number2binary(qa_array[i], 16)
    zerone = rep(0, 4)
    if (qa_bit[12]==1){
      zerone[1] = 1
    }
    if (qa_bit[8] * qa_bit[9]==1){
      zerone[2] = 1
    }
    if (qa_bit[6] * qa_bit[7]==1){
      zerone[3] = 1
    }
    if (qa_bit[4] * qa_bit[5]==1){
      zerone[4] = 1
    }
    if(sum(condition_array & zerone)>0){
      classifly_array[i] = 0
    }
  }
  return(classifly_array)
}
number2binary = function(number, noBits) {
  binary_vector = rev(as.numeric(intToBits(number)))
  if(missing(noBits)) {
    return(binary_vector)
  } else {
    binary_vector[-(1:(length(binary_vector) - noBits))]
  }
}




LS_band_graph <- function(long, lat, band, condition_array){
  query_tmp <- paste("SELECT date filename, ST_Value(rast, ST_SetSRID(ST_Point(", toString(long), ",", toString(lat), "), 32621)) FROM landsat 
WHERE band = '",toString(band),"'AND ST_Intersects(ST_SetSRID(ST_Point(", toString(long),",", toString(lat), "), 32621), rast)", sep = "")
  df <- data.frame(dbGetQuery(conn, query_tmp))
  colnames(df) <- c("Date", "Value")
  df$points_select <- getQAarray(df$Value, condition_array)
  df <- df[df$points_select == 1,]
  df %>%
    ggplot(aes(x = as.Date(Date), y = Value)) +
    labs(y = "Values", x = "Date") +
    geom_point(aes(x = Date, y = Value), colour = 'green4') +
    scale_x_date(date_breaks = "12 months", date_labels = "%b%y", limits = as.Date(c("2013-01-01", "2022-03-01")))+
    labs(title = paste("Time Series for Band", toString(band))) +
    ylim(5000, 50000) +
    theme_bw()
}


##get long and lat
dat <- function (x1,y1){
  points <- cbind(x1,y1)
  v <- vect(points, crs="+proj=utm +zone=10 +datum=WGS84  +units=m")
  y <- project(v, "+proj=longlat +datum=WGS84")
  lonlat <- geom(y)[, c("x", "y")]
  lonlat=data.frame(lonlat)
  long=lonlat[1,]
  lat=lonlat[2,]
  data =data.frame(cbind(c(long,lat),c(x1,y1)))
  colnames(data)[1]<- "longitude latitude"
  colnames(data)[2]<- "UTM cordinates"
  rownames(data)[1] <- "longitude"
  rownames(data)[2] <- "latitude"
  data}



library(shiny)
library(shinythemes)
library(shinydashboard)
library(shinycssloaders)

ui <- fluidPage(
  theme = shinytheme("slate"), collapsible = TRUE,
  tags$style(type="text/css",
             ".shiny-output-error { visibility: hidden; }",
             ".shiny-output-error:before { visibility: hidden; }"
  ),
  windowTitle = "CHLORIS",
  navbarMenu("Time Series Plot",
             tabPanel("Time Series",
                      sidebarLayout(
                        mainPanel(plotOutput("plot1", height = 200 )),
                        
                        sidebarPanel(
                          fluidRow(
                            mainPanel(tableOutput("table")),
                            
                          )))
             ),
             
             tabPanel("first analysis",
                      sidebarLayout(
                        sidebarPanel(
                          selectInput("first_date",
                                      label = "getMask day",
                                      choices = unique(qdf$date)),
                          selectInput("get_band",
                                      label = "Band:",
                                      choices = c("QA",2,3,4,5)),
                          checkboxInput("qa_array1",
                                        
                                        label = "cloud",
                                        value = TRUE),
                          checkboxInput("qa_array2",
                                        
                                        label = "shadow",
                                        value = FALSE),
                          checkboxInput("qa_array3",
                                        
                                        label = "SnowIce",
                                        value = FALSE),
                          checkboxInput("qa_array4",
                                        
                                        label = "cirrus",
                                        value = FALSE)
                        ),
                        mainPanel(withSpinner(imageOutput("tiffimage",click = "click",height = 500)))
                      )))
  
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  #timeseries
  
  output$plot1 <- renderPlot({
    x=input$click[1]
    y=input$click[2]
    LS_band_graph(x,y,input$get_band,c(input$qa_array1, input$qa_array2, 
                                       input$qa_array3, input$qa_array4))}, deleteFile=FALSE)
  #maps
  
  output$tiffimage <- renderPlot({
    getMask(input$first_date, as.character(input$get_band), c(input$qa_array1, input$qa_array2, 
                                                              input$qa_array3, input$qa_array4))}, deleteFile=FALSE)
  
  
  
  
  output$table <- renderTable({
    x=input$click[1]
    y=input$click[2]
    dat(x,y)
  })
  
}


# Run the application 
shinyApp(ui = ui, server = server)
